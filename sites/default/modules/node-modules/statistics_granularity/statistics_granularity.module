<?php
// $Id: statistics_granularity.module,v 1.1.2.2.4.1 2010/05/25 00:49:14 bassistjimmyjam Exp $

/**
 * Implementation of hook_cron().
 */
function statistics_granularity_cron() {
  // get the last cleared variables
  $last_week = variable_get('statistics_granularity_last_week', '');
  $last_month = variable_get('statistics_granularity_last_month', '');
  $last_year = variable_get('statistics_granularity_last_year', '');
  
  // check to see if it's the first of the week and we haven't reset the count
  // yet
  if (date('w') == 0 && $last_week != date('W')) {
    db_query('UPDATE {node_counter} SET weekcount = 0');
    variable_set('statistics_granularity_last_week', date('W'));
  } // end if we need to clear the week counts
  
  // check to see if it's the first of the month and we haven't reset the count
  // yet
  if (date('d') == '01' && $last_month != date('m')) {
    db_query('UPDATE {node_counter} SET monthcount = 0');
    variable_set('statistics_granularity_last_month', date('m'));
  } // end if we need to clear the month counts
  
  // check to see if it's the first of the year and we haven't reset the count
  // yet
  if (date('z') == 0 && $last_year != date('Y')) {
    db_query('UPDATE {node_counter} SET yearcount = 0');
    variable_set('statistics_granularity_last_year', date('Y'));
  } // end if we need to clear the year counts
} // end function statistics_granularity_cron()

/**
 * Implementation of hook_exit().
 */
function statistics_granularity_exit() {
  drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
  
  if (variable_get('statistics_count_content_views', 0)) {
    // We are counting content views.
    if ((arg(0) == 'node') && is_numeric(arg(1)) && arg(2) == '') {
      // A node has been viewed, so update the node's counters.
      db_merge('node_counter')
        ->key(array('nid' => arg(1)))
        ->fields(array(
          'weekcount' => 1,
          'monthcount' => 1,
          'yearcount' => 1,
        ))
        ->expression('weekcount', 'weekcount + 1')
        ->expression('monthcount', 'monthcount + 1')
        ->expression('yearcount', 'yearcount + 1')
        ->execute();
    }
  }
} // end statistics_granularity_exit()

/**
 * Implementation of hook_views_api().
 */
function statistics_granularity_views_api() {
  return array(
    'api' => 2,
  );
} // end function statistics_granularity_views_api()
